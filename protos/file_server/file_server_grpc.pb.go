// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package file_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServerServiceClient is the client API for FileServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerServiceClient interface {
	SingleUpload(ctx context.Context, in *UploadInfo, opts ...grpc.CallOption) (*UpLoadResponse, error)
	ChunkUpload(ctx context.Context, opts ...grpc.CallOption) (FileServerService_ChunkUploadClient, error)
	Download(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*DownloadResponse, error)
	BigFileDownload(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (FileServerService_BigFileDownloadClient, error)
}

type fileServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerServiceClient(cc grpc.ClientConnInterface) FileServerServiceClient {
	return &fileServerServiceClient{cc}
}

func (c *fileServerServiceClient) SingleUpload(ctx context.Context, in *UploadInfo, opts ...grpc.CallOption) (*UpLoadResponse, error) {
	out := new(UpLoadResponse)
	err := c.cc.Invoke(ctx, "/fs.FileServerService/SingleUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerServiceClient) ChunkUpload(ctx context.Context, opts ...grpc.CallOption) (FileServerService_ChunkUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerService_ServiceDesc.Streams[0], "/fs.FileServerService/ChunkUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerServiceChunkUploadClient{stream}
	return x, nil
}

type FileServerService_ChunkUploadClient interface {
	Send(*UploadInfo) error
	CloseAndRecv() (*UpLoadResponse, error)
	grpc.ClientStream
}

type fileServerServiceChunkUploadClient struct {
	grpc.ClientStream
}

func (x *fileServerServiceChunkUploadClient) Send(m *UploadInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerServiceChunkUploadClient) CloseAndRecv() (*UpLoadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpLoadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerServiceClient) Download(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, "/fs.FileServerService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServerServiceClient) BigFileDownload(ctx context.Context, in *DownloadInfo, opts ...grpc.CallOption) (FileServerService_BigFileDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerService_ServiceDesc.Streams[1], "/fs.FileServerService/BigFileDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerServiceBigFileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileServerService_BigFileDownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type fileServerServiceBigFileDownloadClient struct {
	grpc.ClientStream
}

func (x *fileServerServiceBigFileDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServerServiceServer is the server API for FileServerService service.
// All implementations must embed UnimplementedFileServerServiceServer
// for forward compatibility
type FileServerServiceServer interface {
	SingleUpload(context.Context, *UploadInfo) (*UpLoadResponse, error)
	ChunkUpload(FileServerService_ChunkUploadServer) error
	Download(context.Context, *DownloadInfo) (*DownloadResponse, error)
	BigFileDownload(*DownloadInfo, FileServerService_BigFileDownloadServer) error
	mustEmbedUnimplementedFileServerServiceServer()
}

// UnimplementedFileServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerServiceServer struct {
}

func (UnimplementedFileServerServiceServer) SingleUpload(context.Context, *UploadInfo) (*UpLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SingleUpload not implemented")
}
func (UnimplementedFileServerServiceServer) ChunkUpload(FileServerService_ChunkUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method ChunkUpload not implemented")
}
func (UnimplementedFileServerServiceServer) Download(context.Context, *DownloadInfo) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileServerServiceServer) BigFileDownload(*DownloadInfo, FileServerService_BigFileDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method BigFileDownload not implemented")
}
func (UnimplementedFileServerServiceServer) mustEmbedUnimplementedFileServerServiceServer() {}

// UnsafeFileServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerServiceServer will
// result in compilation errors.
type UnsafeFileServerServiceServer interface {
	mustEmbedUnimplementedFileServerServiceServer()
}

func RegisterFileServerServiceServer(s grpc.ServiceRegistrar, srv FileServerServiceServer) {
	s.RegisterService(&FileServerService_ServiceDesc, srv)
}

func _FileServerService_SingleUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServiceServer).SingleUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileServerService/SingleUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServiceServer).SingleUpload(ctx, req.(*UploadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServerService_ChunkUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerServiceServer).ChunkUpload(&fileServerServiceChunkUploadServer{stream})
}

type FileServerService_ChunkUploadServer interface {
	SendAndClose(*UpLoadResponse) error
	Recv() (*UploadInfo, error)
	grpc.ServerStream
}

type fileServerServiceChunkUploadServer struct {
	grpc.ServerStream
}

func (x *fileServerServiceChunkUploadServer) SendAndClose(m *UpLoadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerServiceChunkUploadServer) Recv() (*UploadInfo, error) {
	m := new(UploadInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileServerService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerServiceServer).Download(ctx, req.(*DownloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileServerService_BigFileDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServerServiceServer).BigFileDownload(m, &fileServerServiceBigFileDownloadServer{stream})
}

type FileServerService_BigFileDownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type fileServerServiceBigFileDownloadServer struct {
	grpc.ServerStream
}

func (x *fileServerServiceBigFileDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// FileServerService_ServiceDesc is the grpc.ServiceDesc for FileServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs.FileServerService",
	HandlerType: (*FileServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SingleUpload",
			Handler:    _FileServerService_SingleUpload_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _FileServerService_Download_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChunkUpload",
			Handler:       _FileServerService_ChunkUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BigFileDownload",
			Handler:       _FileServerService_BigFileDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_server.proto",
}
